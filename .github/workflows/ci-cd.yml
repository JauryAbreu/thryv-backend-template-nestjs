name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  AWS_REGION: us-east-1

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Check formatting
      run: npm run format -- --check

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: thryv_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      dynamodb:
        image: amazon/dynamodb-local
        ports:
          - 8000:8000
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run unit tests
      run: npm run test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:password@localhost:5432/thryv_test_db
        DYNAMODB_ENDPOINT: http://localhost:8000
        DYNAMODB_TABLE_COMPANY: company-table-test
        AUTH0_DOMAIN: test.auth0.com
        AUTH0_AUDIENCE: test-api
    
    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:password@localhost:5432/thryv_test_db
        DYNAMODB_ENDPOINT: http://localhost:8000
        DYNAMODB_TABLE_COMPANY: company-table-test
        AUTH0_DOMAIN: test.auth0.com
        AUTH0_AUDIENCE: test-api
    
    - name: Generate coverage report
      run: npm run test:cov
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: true

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-dist
        path: dist/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=critical
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Serverless Framework
      run: npm install -g serverless@3
    
    - name: Deploy to AWS Lambda
      run: |
        npm run build
        serverless deploy --stage development
      env:
        SERVERLESS_STAGE: development
        DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }}
        DYNAMODB_TABLE_COMPANY: ${{ secrets.DEV_DYNAMODB_TABLE_COMPANY }}
        AUTH0_DOMAIN: ${{ secrets.DEV_AUTH0_DOMAIN }}
        AUTH0_AUDIENCE: ${{ secrets.DEV_AUTH0_AUDIENCE }}
        DD_API_KEY: ${{ secrets.DEV_DD_API_KEY }}
        CUBE_API_URL: ${{ secrets.DEV_CUBE_API_URL }}
        CUBE_API_TOKEN: ${{ secrets.DEV_CUBE_API_TOKEN }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Serverless Framework
      run: npm install -g serverless@3
    
    - name: Deploy to AWS Lambda
      run: |
        npm run build
        serverless deploy --stage staging
      env:
        SERVERLESS_STAGE: staging
        DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        DYNAMODB_TABLE_COMPANY: ${{ secrets.STAGING_DYNAMODB_TABLE_COMPANY }}
        AUTH0_DOMAIN: ${{ secrets.STAGING_AUTH0_DOMAIN }}
        AUTH0_AUDIENCE: ${{ secrets.STAGING_AUTH0_AUDIENCE }}
        DD_API_KEY: ${{ secrets.STAGING_DD_API_KEY }}
        CUBE_API_URL: ${{ secrets.STAGING_CUBE_API_URL }}
        CUBE_API_TOKEN: ${{ secrets.STAGING_CUBE_API_TOKEN }}

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Serverless Framework
      run: npm install -g serverless@3
    
    - name: Deploy to AWS Lambda
      run: |
        npm run build
        serverless deploy --stage production
      env:
        SERVERLESS_STAGE: production
        DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
        DYNAMODB_TABLE_COMPANY: ${{ secrets.PROD_DYNAMODB_TABLE_COMPANY }}
        AUTH0_DOMAIN: ${{ secrets.PROD_AUTH0_DOMAIN }}
        AUTH0_AUDIENCE: ${{ secrets.PROD_AUTH0_AUDIENCE }}
        DD_API_KEY: ${{ secrets.PROD_DD_API_KEY }}
        CUBE_API_URL: ${{ secrets.PROD_CUBE_API_URL }}
        CUBE_API_TOKEN: ${{ secrets.PROD_CUBE_API_TOKEN }}
    
    - name: Run smoke tests
      run: |
        # Add smoke tests here
        echo "Running production smoke tests..."
        # curl -f https://api.thryv.com/health || exit 1

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-prod]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
